package subway.domain;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;

/**
 * create table station (
 *     id bigint generated by default as identity,
 *     name varchar(255) not null,
 *     primary key (id)
 * )
 */
@DataJpaTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
public class StationRepositoryTest {

    public static final Station STATION_1 = new Station(1L, "잠실역");

    @Autowired
    private StationRepository stations;

    @Autowired
    private TestEntityManager tem;

    @AfterEach
    void clear() {
        stations.deleteAll();
    }

    @Test
    void TestEntityManager_Test() {
//        EntityManager em = tem.getEntityManager();
//        EntityTransaction transaction = em.getTransaction();
//        transaction.begin();
    }

    @Test
    void save() {
        Station expected = new Station("잠실역");
        Station actual = stations.save(expected);
        assertAll(
                () -> assertThat(actual.getId()).isNotNull(),
                () -> assertThat(actual.getName()).isEqualTo(expected.getName())
        );
    }

    @Test
    void findByName() {
        String expected = "잠실역";
        stations.save(new Station(expected));
        String actual = stations.findByName(expected).getName();
        assertThat(actual).isEqualTo(expected);
    }

    @Test
    void create() {
        stations.save(STATION_1);
        List<Station> stations = this.stations.findAll();

        assertThat(stations.get(0)).isNotNull();
    }

    @Test
    void findByName_2() {
        Station expected = stations.save(new Station(1L, "어대역"));
        Station actual = stations.findByName(expected.getName());

        assertThat(actual.getId()).isNotNull();
        assertThat(actual.getId()).isEqualTo(expected.getId());
        assertThat(actual.getName()).isEqualTo(expected.getName());
        assertThat(actual).isSameAs(expected);    // 동일성 비교 (주소값도 같다)

        assertAll(
                () -> assertThat(actual.getId()).isEqualTo(expected.getId()),
                () -> assertThat(actual.getName()).isEqualTo(expected.getName()),
                () -> assertThat(actual).isSameAs(expected)    // 동일성 비교 (주소값도 같다)
        );
    }

    @Test
    void update() {
        Station expected = stations.save(new Station("잠실역"));
        expected.changeName("몽촌토성역");
        Station actual = stations.findByName("몽촌토성역");
        assertThat(actual).isSameAs(expected);
        assertThat(actual == expected).isTrue();
    }

    @Test
    void identity() {
        Station expected = stations.save(new Station("잠실역"));
        Station actual = stations.findById(expected.getId()).get();
        assertThat(expected == actual).isTrue();
        assertThat(expected.equals(actual)).isTrue();
    }

}
